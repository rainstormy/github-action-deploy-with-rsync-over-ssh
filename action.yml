name: Deploy with Rsync over SSH
description: Copies files from the GitHub Actions runner to a remote host using the Rsync tool over an SSH connection.
author: Steffen Diswal
inputs:
  rsync-destination-path:
    description: The pathname on the remote host to which the files are to be copied.
    required: true
  rsync-host:
    description: The hostname of the remote server onto which the files are to be copied.
    required: true
  rsync-options:
    description: The options to pass to the Rsync tool. Include the `--rsh` option to set the SSH credentials for Rsync.
    required: true
  rsync-source-path:
    description: The pathname on the GitHub Actions runner from which the files are to be copied.
    required: true
  ssh-known-hosts:
    description: A list of trusted remote host keys gathered by the ssh-keyscan utility to be stored temporarily on the GitHub Actions runner.
    required: true
  ssh-private-key:
    description: The private SSH key to be stored temporarily on the GitHub Actions runner in the file designated by the `ssh-private-key-filename` input parameter. It is used by the Rsync tool to establish an SSH connection to the remote host which should know the public SSH key in advance.
    required: true
  ssh-private-key-filename:
    description: The name of the file in the `.ssh` directory on the GitHub Actions runner in which the value of the `ssh-private-key` input parameter is temporarily stored.
    required: false
    default: 'id_ed25519'
runs:
  using: composite
  steps:
    - name: Verify declaration of input parameters
      env:
        RSYNC_DESTINATION_PATH: ${{ inputs.rsync-destination-path }}
        RSYNC_HOST: ${{ inputs.rsync-host }}
        RSYNC_OPTIONS: ${{ inputs.rsync-options }}
        RSYNC_SOURCE_PATH: ${{ inputs.rsync-source-path }}
        SSH_KNOWN_HOSTS: ${{ inputs.ssh-known-hosts }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh-private-key }}
        SSH_PRIVATE_KEY_FILENAME: ${{ inputs.ssh-private-key-filename }}
      run: |
        if [[ -z "$RSYNC_DESTINATION_PATH" ]]; then
          echo "The input parameter 'rsync-destination-path' must be non-empty."
          exit 1
        fi
        if [[ -z "$RSYNC_HOST" ]]; then
          echo "The input parameter 'rsync-host' must be non-empty."
          exit 1
        fi
        if [[ -z "$RSYNC_OPTIONS" ]]; then
          echo "The input parameter 'rsync-options' must be non-empty."
          exit 1
        fi
        if [[ -z "$RSYNC_SOURCE_PATH" ]]; then
          echo "The input parameter 'rsync-source-path' must be non-empty."
          exit 1
        fi
        if [[ -z "$SSH_KNOWN_HOSTS" ]]; then
          echo "The input parameter 'ssh-known-hosts' must be non-empty."
          exit 1
        fi
        if [[ -z "$SSH_PRIVATE_KEY" ]]; then
          echo "The input parameter 'ssh-private-key' must be non-empty."
          exit 1
        fi
        if [[ -z "$SSH_PRIVATE_KEY_FILENAME" ]]; then
          echo "The input parameter 'ssh-private-key-filename' must be non-empty."
          exit 1
        fi
      shell: bash

    - name: Prepare the SSH configuration
      env:
        SSH_KNOWN_HOSTS: ${{ inputs.ssh-known-hosts }}
        SSH_PRIVATE_KEY: ${{ inputs.ssh-private-key }}
        SSH_PRIVATE_KEY_FILENAME: ${{ inputs.ssh-private-key-filename }}
      run: |
        mkdir ~/.ssh
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/"$SSH_PRIVATE_KEY_FILENAME"
        chmod 600 ~/.ssh/"$SSH_PRIVATE_KEY_FILENAME"
      shell: bash

    - name: Deploy with Rsync
      env:
        RSYNC_DESTINATION_PATH: ${{ inputs.rsync-destination-path }}
        RSYNC_HOST: ${{ inputs.rsync-host }}
      run: |
        rsync ${{ inputs.rsync-options }} ${{ inputs.rsync-source-path }} "$RSYNC_HOST":"$RSYNC_DESTINATION_PATH"
      shell: bash

    - if: always()
      name: Erase the SSH configuration
      run: |
        rm --recursive --force ~/.ssh
      shell: bash
